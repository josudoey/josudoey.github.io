export function ProsConsTable () {
  return (
    <table style={{ display: 'block', overflow: 'auto', whiteSpace: 'nowrap' }}>
      <thead>
        <tr>
          <td>I/O 模型</td>
          <td>優點</td>
          <td>缺點</td>
          <td>適用場景</td>
          <td>不適用場景</td>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <b>阻塞 I/O</b>
          </td>
          <td>
            <b>程式設計最簡單直觀</b>
          </td>
          <td>
            <b>效率最低</b>：I/O 等待期間應用程式/執行緒被<b>完全阻塞</b>
            ，CPU 閒置。
          </td>
          <td>
            <b>簡單、低併發</b>
            的應用，如一次性讀取小文件、命令列工具、單使用者應用程式。
          </td>
          <td>
            <b>高併發</b>服務（如 Web 伺服器、聊天伺服器）、需要
            <b>高吞吐量</b>的資料庫操作。
          </td>
        </tr>
        <tr>
          <td>
            <b>非阻塞 I/O</b>
          </td>
          <td>
            <b>應用程式不被阻塞</b>：I/O 請求立即返回，可以同時執行其他任務。
          </td>
          <td>
            <b>CPU 消耗高</b>：需要不斷<b>輪詢 (Polling)</b> 核心，檢查 I/O
            狀態，造成忙等 (busy-waiting)。
          </td>
          <td>
            不建議單獨使用，通常與 <b>I/O 多工</b>
            結合，用於設置文件描述符的非阻塞屬性。
          </td>
          <td>
            <b>任何需要高效處理 I/O 的場景</b>，因為單獨使用效率極低。
          </td>
        </tr>
        <tr>
          <td>
            <b>I/O 多工</b>
          </td>
          <td>
            <b>高效處理高併發</b>：單一執行緒可同時管理大量 I/O 連接。 <br />
            <b>CPU 利用率高</b>：避免了阻塞 I/O 的閒置和非阻塞 I/O 的輪詢開銷。
          </td>
          <td>
            <b>程式設計相對複雜</b>：需要事件循環和狀態機管理。 <br />
            數據仍需從核心複製到使用者空間。
          </td>
          <td>
            <b>高併發網路伺服器</b> (Nginx, Redis)、聊天室、代理伺服器等。{' '}
            <br />
            幾乎所有<b>高併發的網路應用</b>。
          </td>
          <td>
            對<b>極致低延遲</b>或需要<b>大量直接 I/O</b>{' '}
            的場景（如高性能資料庫底層）可能不夠。
          </td>
        </tr>
        <tr>
          <td>
            <b>訊號驅動 I/O</b>
          </td>
          <td>
            <b>非阻塞</b>：I/O 等待期間應用程式不被阻塞。 <br />
            <b>異步通知</b>：數據就緒時透過訊號通知應用程式。
          </td>
          <td>
            <b>程式設計複雜度高</b>：訊號處理機制本身較難控制。 <br />
            <b>難以擴展</b>：不適用於大量文件描述符。
          </td>
          <td>
            某些特定場景，如監控少數幾個非同步事件，例如監聽串列埠數據的到達。
          </td>
          <td>
            <b>通用高併發網路應用</b>、需要處理大量文件或套接字。
          </td>
        </tr>
        <tr>
          <td>
            <b>非同步 I/O (AIO)</b>
          </td>
          <td>
            <b>真正非阻塞</b>：應用程式發出請求後，
            <b>無需等待核心執行任何操作（包括數據複製）</b>。 <br />
            <b>最高效</b>：CPU 利用率最大化，I/O 與計算可<b>完全重疊</b>。
          </td>
          <td>
            <b>程式設計最複雜</b>
            ：需要處理完成事件的回呼或佇列，可能涉及記憶體管理。 <br />
            <b>平台相關</b>：實作依賴作業系統原生支援。
          </td>
          <td>
            <b>高性能資料庫</b>、大規模資料處理系統、檔案伺服器、需要
            <b>極致 I/O 吞吐量和低延遲</b>的應用。
          </td>
          <td>簡單應用程式或對 I/O 效率要求不高的場景，因為複雜度太高。</td>
        </tr>
      </tbody>
    </table>
  )
}
